{
  "name": "routil",
  "version": "0.0.13",
  "description": "gently manipulate req and res",
  "keywords": [],
  "author": {
    "name": "Raynos",
    "email": "raynos2@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Raynos/routil.git"
  },
  "main": "index",
  "scripts": {
    "test": "make test"
  },
  "homepage": "https://github.com/Raynos/routil",
  "contributors": [
    {
      "name": "Jake Verbaten"
    }
  ],
  "bugs": {
    "url": "https://github.com/Raynos/routil/issues",
    "email": "raynos2@gmail.com"
  },
  "dependencies": {
    "error-page": "0.0.3",
    "negotiator": "0.2.3",
    "templar": "0.0.6",
    "xtend": "1.0.3",
    "glob": "3.1.9",
    "filed": "0.0.6"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/raynos/routil/raw/master/LICENSE"
    }
  ],
  "engines": {
    "node": ">=0.4"
  },
  "readme": "# routil\n\nGently manipulate req and res\n\n## Examples\n\nA lot of this code is inspired by [npm-www][3] and [tako][4]\n\nRoutil wraps [ErrorPage][1] and [templar][2] and provides other utilities\n\n    var routil = require(\"routil\")\n\n    /*\n        Configure routil, this allows you to pass config options to both\n            error-page and templar\n    */\n    routil.config({\n        errorPage: errorPageConfigOptions,\n        templar: templarConfigOptions\n    })\n\n    function handler(req, res) {\n        // Calls ErrorPage(req, res)(500, new Error(\"send error\"))\n        routil.errorPage(req, res, [500 new Error(\"send error\")])\n\n        // Redirect to another uri\n        // Status code defaults to 302\n        // Returns either JSON or HTML dependending on Accept header\n        routil.redirect(req, res, \"/redirecting/to/foo\", optionalStatusCode)\n\n        // Reads the Accept header and returns one of the functions based\n        // on what mediaType the client would like\n        var f = routil.mediaTypes(req, res,{\n            \"application/json\": handleJSON,\n            \"text/html\": handleHTML,\n            \"default\": handleDefault\n        })\n\n        // Reads the content type header and returns one of the functions based\n        // on what content was send from the client\n        var f = routil.contentTypes(req, {\n            \"application/json\": handleJSONContent,\n            \"application/x-www-form-urlencoded\": handleForm,\n            \"default\": \"handleDefault\"\n        })\n\n        // Reads the encoding headers and returns one of the functions based\n        // on what encoding the client would like\n        var f = routil.encoding(req, {\n            \"gzip\": handleGzip,\n            \"identity\": handleIdentity,\n            \"default\": handleDefault\n        })\n\n        // Sends json to the client\n        routil.sendJson(res, someJsonObject, optionalStatusCode)\n\n        // send html to the client\n        routil.sendHtml(res, someHtmlString, optionalStatusCode)\n\n        // send data to the client\n        routil.send(res, data, statusCode, headers)\n\n        // Handle different methods. Returns a function which takes req as \n        // the first parameter and then calls the correct function based on \n        // the method\n        var f = methods({\n            \"GET\": handleGet,\n            \"POST\": handlePost,\n            \"DELETE\": handleDelete,\n            \"PUT\": handlePut\n        })\n\n        // Handle different methods but also read the _method field on a HTML\n        // form. This will map a POST with _method=PUT to a PUT handler\n        var f = methods({\n            \"PUT\": worksWithForms\n        }, true)\n\n        // Calls Templar(req, res, config)(templateName, data)\n        routil.template(req, res, templateName, data)\n\n        // extracts the HTTP body from the request and returns it in the callback\n        // as a string\n        routil.body(req, callback<String>)\n\n        // extracts the HTTP body and maps it into an object based on querystring\n        // parsing\n        routil.formBody(req, res, callback<Object>)\n\n        // extracts the HTTP body and maps it into an object based on JSON parsing\n        routil.jsonBody(req, res, callback<Object>)\n    }\n\n## Documentation\n\nLater\n\n## Credit\n\nMost of the code is inspired by isaacs and mikeal\n        \n## MIT Licenced\n\n  [1]: https://github.com/isaacs/error-page\n  [2]: https://github.com/isaacs/templar\n  [3]: https://github.com/isaacs/npm-www\n  [4]: https://github.com/mikeal/tako",
  "_id": "routil@0.0.13",
  "_from": "routil@0.0.13"
}
